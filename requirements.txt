Игра на внимание - "Поймай шарик!"
Суть игры проста: в случайном месте появляется на короткое время шарик и необходимо успеть щелкнуть по нему мышкой.
Для создания игр используются специальные библиотеки (движки),
хотя бы Pygame, которые уже содержат такие вещи, как двойная буферизация, работа с спрайтами и т.д.
Эту игру создадим с помощью tkinter

импортируем  tkinter
from tkinter import *

создаем окно
window = Tk()

С помощью метода geometry задаем размер окна. Метод принимает строку определенного формата,
два числа в строке-аргументе geometry задают ширину и высоту окна
window.geometry('800x600')

зададим название этому окну
window.title("Поймай шарик!")

Создаем холст для отрисовки обЪектов
c = Canvas(window,width=800,height=550,bg='yellow')
создали холст Canvas,который поместили на наше окно window
задали ширину width и высоту height данного холста и также создали фон bg-желтого цвета.
К этому холсту будем обращаться как переменной = с

Данный обЪект помещаем на наше окно для этого используем упаковщик
c.pack()

Для появления разных шариков создаем список с разным цветом
colors = ['pink','violet','brown','red','green','cyan','blue','magenta','black']

задаем координаты шарика, позже они будут задаваться рандомно и задаем счетчики,
которые будут считать попадания и промахи
x = 0
y = 0
r = 0
points = 0
miss = 0
zero = 0

начинаем писать процедуру создания нового шарика def new_ball():, поскольку шарик должен появляться в случайном месте
задаем кординаты x,y и радиус r- рандомно. Для этого импортируем библиотеку рендом
from random import randrange as rnd, choice
задаем координаты x,y,r рандомно

def new_ball():

    global x, y, r, zero, res, points
    c.delete(ALL)
    res = c.create_text(300,20,text="Попаданий :" + str(points)+ " очков"
                               +'/'+"Промахи :"+str(miss)+" раз"+'/'+
                               "Упущено :"+str(zero)+" шаров", font = 'Arial 15')
    x = rnd(100,700)
    y = rnd(100,500)
    r = rnd(20,50)
    target = c.create_oval(x-r,y-r,x+r,y+r,fill = choice(colors), width=0)
    if points < 20:
        window.after(rnd(500, 800),new_ball)
    else:
        c.delete(ALL)
        res = c.create_text(350,250,text="  Вы выйграли! Вы набрали: " + str(points) + "  балла(ов)", font = 'Arial 20')
    zero+=1


создаем новый шарик и заполняем его случайным цветом из выбранного списка
target = c.create_oval(x-r,y-r,x+r,y+r,fill = choice(colors), width=0)

чтобы с холста удалялись лишние шарики используем
c.delete(ALL)

Чтобы отследить попадание мыши в фигуру используем метод bind
пишем контейнер контейнер это сам конвас =c. затем метод bind,событие - '<Button-1>'-щелчек мыши
и функция обработки нажатия мыши- click
c.bind('<Button-1>',click)

задаем время через,которое будет показываться шарик
window.after(800,new_ball)

вызываем также функцию mainloop(),которая создает бесконечный цикл окна, пока не будет закрыта.

Чтобы определить, попали ли мы в круг, нужно знать его координаты,
 радиус круга и координаты мыши в момент щелчка. Координаты мыши легко получить через event.x, event.y.
 def click(event):
  global points, miss, zero, res, xz
    if abs(x-event.x) < r/2 and abs(y-event.y)<r/2:
        points += 2
        zero-=1
    elif abs(x-event.x) < r and abs(y-event.y)<r:
        points += 1
        zero-=1
    else:
        miss += 1
    c.delete(ALL)
    res = c.create_text(300,20,text="Попаданий :" + str(points)+ " очков"
                               +'/'+"Промахи :"+str(miss)+" раз"+'/'+
                               "Упущено :"+str(zero)+" шаров", font = 'Arial 15')

  global используем , чтобы сохранить значение и, чтобы после завершения работы функции, они не были уничтожены
 чтобы отобразить количество попаданий на экране и результат в конце игры используем метод = create_text